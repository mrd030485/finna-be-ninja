//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace OrderTrackerv2.HOOemployees {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DummyOrderData : DataSet {
        
        private OrdersDataTable tableOrders;
        
        public DummyOrderData() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DummyOrderData(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Orders"] != null)) {
                    this.Tables.Add(new OrdersDataTable(ds.Tables["Orders"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OrdersDataTable Orders {
            get {
                return this.tableOrders;
            }
        }
        
        public override DataSet Clone() {
            DummyOrderData cln = ((DummyOrderData)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Orders"] != null)) {
                this.Tables.Add(new OrdersDataTable(ds.Tables["Orders"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableOrders = ((OrdersDataTable)(this.Tables["Orders"]));
            if ((this.tableOrders != null)) {
                this.tableOrders.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DummyOrderData";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DummyOrderData.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableOrders = new OrdersDataTable();
            this.Tables.Add(this.tableOrders);
        }
        
        private bool ShouldSerializeOrders() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void OrdersRowChangeEventHandler(object sender, OrdersRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrdersDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnorderNumber;
            
            private DataColumn columnorderDate;
            
            private DataColumn columndueDate;
            
            private DataColumn columnrecDate;
            
            private DataColumn columnreorderNumber;
            
            private DataColumn columnshippingMethod;
            
            private DataColumn columnartDueDate;
            
            private DataColumn columnrushReorderRegular;
            
            private DataColumn columnorderType;
            
            private DataColumn columnxOrderNumber;
            
            private DataColumn columncustomerNumber;
            
            private DataColumn columncontactPersonNumber;
            
            private DataColumn columninsideRepNumber;
            
            private DataColumn columnoutsideRepNumber;
            
            private DataColumn columnnumColorsFront;
            
            private DataColumn columnnumColorsBack;
            
            private DataColumn columnnumColorsSleeve;
            
            private DataColumn columnPMScharge;
            
            private DataColumn columnsetupCharge;
            
            private DataColumn columnartCharge;
            
            private DataColumn columnrushCharge;
            
            private DataColumn columndeposit;
            
            private DataColumn columnsubtotal;
            
            private DataColumn columnsalesTax;
            
            private DataColumn columnshipping;
            
            private DataColumn columntotalDue;
            
            private DataColumn columnbalanceDue;
            
            internal OrdersDataTable() : 
                    base("Orders") {
                this.InitClass();
            }
            
            internal OrdersDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn orderNumberColumn {
                get {
                    return this.columnorderNumber;
                }
            }
            
            internal DataColumn orderDateColumn {
                get {
                    return this.columnorderDate;
                }
            }
            
            internal DataColumn dueDateColumn {
                get {
                    return this.columndueDate;
                }
            }
            
            internal DataColumn recDateColumn {
                get {
                    return this.columnrecDate;
                }
            }
            
            internal DataColumn reorderNumberColumn {
                get {
                    return this.columnreorderNumber;
                }
            }
            
            internal DataColumn shippingMethodColumn {
                get {
                    return this.columnshippingMethod;
                }
            }
            
            internal DataColumn artDueDateColumn {
                get {
                    return this.columnartDueDate;
                }
            }
            
            internal DataColumn rushReorderRegularColumn {
                get {
                    return this.columnrushReorderRegular;
                }
            }
            
            internal DataColumn orderTypeColumn {
                get {
                    return this.columnorderType;
                }
            }
            
            internal DataColumn xOrderNumberColumn {
                get {
                    return this.columnxOrderNumber;
                }
            }
            
            internal DataColumn customerNumberColumn {
                get {
                    return this.columncustomerNumber;
                }
            }
            
            internal DataColumn contactPersonNumberColumn {
                get {
                    return this.columncontactPersonNumber;
                }
            }
            
            internal DataColumn insideRepNumberColumn {
                get {
                    return this.columninsideRepNumber;
                }
            }
            
            internal DataColumn outsideRepNumberColumn {
                get {
                    return this.columnoutsideRepNumber;
                }
            }
            
            internal DataColumn numColorsFrontColumn {
                get {
                    return this.columnnumColorsFront;
                }
            }
            
            internal DataColumn numColorsBackColumn {
                get {
                    return this.columnnumColorsBack;
                }
            }
            
            internal DataColumn numColorsSleeveColumn {
                get {
                    return this.columnnumColorsSleeve;
                }
            }
            
            internal DataColumn PMSchargeColumn {
                get {
                    return this.columnPMScharge;
                }
            }
            
            internal DataColumn setupChargeColumn {
                get {
                    return this.columnsetupCharge;
                }
            }
            
            internal DataColumn artChargeColumn {
                get {
                    return this.columnartCharge;
                }
            }
            
            internal DataColumn rushChargeColumn {
                get {
                    return this.columnrushCharge;
                }
            }
            
            internal DataColumn depositColumn {
                get {
                    return this.columndeposit;
                }
            }
            
            internal DataColumn subtotalColumn {
                get {
                    return this.columnsubtotal;
                }
            }
            
            internal DataColumn salesTaxColumn {
                get {
                    return this.columnsalesTax;
                }
            }
            
            internal DataColumn shippingColumn {
                get {
                    return this.columnshipping;
                }
            }
            
            internal DataColumn totalDueColumn {
                get {
                    return this.columntotalDue;
                }
            }
            
            internal DataColumn balanceDueColumn {
                get {
                    return this.columnbalanceDue;
                }
            }
            
            public OrdersRow this[int index] {
                get {
                    return ((OrdersRow)(this.Rows[index]));
                }
            }
            
            public event OrdersRowChangeEventHandler OrdersRowChanged;
            
            public event OrdersRowChangeEventHandler OrdersRowChanging;
            
            public event OrdersRowChangeEventHandler OrdersRowDeleted;
            
            public event OrdersRowChangeEventHandler OrdersRowDeleting;
            
            public void AddOrdersRow(OrdersRow row) {
                this.Rows.Add(row);
            }
            
            public OrdersRow AddOrdersRow(
                        int orderNumber, 
                        System.DateTime orderDate, 
                        System.DateTime dueDate, 
                        System.DateTime recDate, 
                        int reorderNumber, 
                        string shippingMethod, 
                        System.DateTime artDueDate, 
                        string rushReorderRegular, 
                        string orderType, 
                        int xOrderNumber, 
                        string customerNumber, 
                        string contactPersonNumber, 
                        string insideRepNumber, 
                        string outsideRepNumber, 
                        int numColorsFront, 
                        int numColorsBack, 
                        int numColorsSleeve, 
                        System.Decimal PMScharge, 
                        System.Decimal setupCharge, 
                        System.Decimal artCharge, 
                        System.Decimal rushCharge, 
                        System.Decimal deposit, 
                        System.Decimal subtotal, 
                        System.Decimal salesTax, 
                        System.Decimal shipping, 
                        System.Decimal totalDue, 
                        System.Decimal balanceDue) {
                OrdersRow rowOrdersRow = ((OrdersRow)(this.NewRow()));
                rowOrdersRow.ItemArray = new object[] {
                        orderNumber,
                        orderDate,
                        dueDate,
                        recDate,
                        reorderNumber,
                        shippingMethod,
                        artDueDate,
                        rushReorderRegular,
                        orderType,
                        xOrderNumber,
                        customerNumber,
                        contactPersonNumber,
                        insideRepNumber,
                        outsideRepNumber,
                        numColorsFront,
                        numColorsBack,
                        numColorsSleeve,
                        PMScharge,
                        setupCharge,
                        artCharge,
                        rushCharge,
                        deposit,
                        subtotal,
                        salesTax,
                        shipping,
                        totalDue,
                        balanceDue};
                this.Rows.Add(rowOrdersRow);
                return rowOrdersRow;
            }
            
            public OrdersRow FindByorderNumber(int orderNumber) {
                return ((OrdersRow)(this.Rows.Find(new object[] {
                            orderNumber})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                OrdersDataTable cln = ((OrdersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new OrdersDataTable();
            }
            
            internal void InitVars() {
                this.columnorderNumber = this.Columns["orderNumber"];
                this.columnorderDate = this.Columns["orderDate"];
                this.columndueDate = this.Columns["dueDate"];
                this.columnrecDate = this.Columns["recDate"];
                this.columnreorderNumber = this.Columns["reorderNumber"];
                this.columnshippingMethod = this.Columns["shippingMethod"];
                this.columnartDueDate = this.Columns["artDueDate"];
                this.columnrushReorderRegular = this.Columns["rushReorderRegular"];
                this.columnorderType = this.Columns["orderType"];
                this.columnxOrderNumber = this.Columns["xOrderNumber"];
                this.columncustomerNumber = this.Columns["customerNumber"];
                this.columncontactPersonNumber = this.Columns["contactPersonNumber"];
                this.columninsideRepNumber = this.Columns["insideRepNumber"];
                this.columnoutsideRepNumber = this.Columns["outsideRepNumber"];
                this.columnnumColorsFront = this.Columns["numColorsFront"];
                this.columnnumColorsBack = this.Columns["numColorsBack"];
                this.columnnumColorsSleeve = this.Columns["numColorsSleeve"];
                this.columnPMScharge = this.Columns["PMScharge"];
                this.columnsetupCharge = this.Columns["setupCharge"];
                this.columnartCharge = this.Columns["artCharge"];
                this.columnrushCharge = this.Columns["rushCharge"];
                this.columndeposit = this.Columns["deposit"];
                this.columnsubtotal = this.Columns["subtotal"];
                this.columnsalesTax = this.Columns["salesTax"];
                this.columnshipping = this.Columns["shipping"];
                this.columntotalDue = this.Columns["totalDue"];
                this.columnbalanceDue = this.Columns["balanceDue"];
            }
            
            private void InitClass() {
                this.columnorderNumber = new DataColumn("orderNumber", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnorderNumber);
                this.columnorderDate = new DataColumn("orderDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnorderDate);
                this.columndueDate = new DataColumn("dueDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndueDate);
                this.columnrecDate = new DataColumn("recDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnrecDate);
                this.columnreorderNumber = new DataColumn("reorderNumber", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnreorderNumber);
                this.columnshippingMethod = new DataColumn("shippingMethod", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnshippingMethod);
                this.columnartDueDate = new DataColumn("artDueDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnartDueDate);
                this.columnrushReorderRegular = new DataColumn("rushReorderRegular", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnrushReorderRegular);
                this.columnorderType = new DataColumn("orderType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnorderType);
                this.columnxOrderNumber = new DataColumn("xOrderNumber", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnxOrderNumber);
                this.columncustomerNumber = new DataColumn("customerNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncustomerNumber);
                this.columncontactPersonNumber = new DataColumn("contactPersonNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncontactPersonNumber);
                this.columninsideRepNumber = new DataColumn("insideRepNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columninsideRepNumber);
                this.columnoutsideRepNumber = new DataColumn("outsideRepNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnoutsideRepNumber);
                this.columnnumColorsFront = new DataColumn("numColorsFront", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnumColorsFront);
                this.columnnumColorsBack = new DataColumn("numColorsBack", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnumColorsBack);
                this.columnnumColorsSleeve = new DataColumn("numColorsSleeve", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnumColorsSleeve);
                this.columnPMScharge = new DataColumn("PMScharge", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPMScharge);
                this.columnsetupCharge = new DataColumn("setupCharge", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsetupCharge);
                this.columnartCharge = new DataColumn("artCharge", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnartCharge);
                this.columnrushCharge = new DataColumn("rushCharge", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnrushCharge);
                this.columndeposit = new DataColumn("deposit", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndeposit);
                this.columnsubtotal = new DataColumn("subtotal", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsubtotal);
                this.columnsalesTax = new DataColumn("salesTax", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsalesTax);
                this.columnshipping = new DataColumn("shipping", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnshipping);
                this.columntotalDue = new DataColumn("totalDue", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntotalDue);
                this.columnbalanceDue = new DataColumn("balanceDue", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnbalanceDue);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnorderNumber}, true));
                this.columnorderNumber.AllowDBNull = false;
                this.columnorderNumber.Unique = true;
                this.columnorderDate.AllowDBNull = false;
                this.columnrushReorderRegular.AllowDBNull = false;
                this.columnorderType.AllowDBNull = false;
                this.columncustomerNumber.AllowDBNull = false;
            }
            
            public OrdersRow NewOrdersRow() {
                return ((OrdersRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new OrdersRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(OrdersRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OrdersRowChanged != null)) {
                    this.OrdersRowChanged(this, new OrdersRowChangeEvent(((OrdersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OrdersRowChanging != null)) {
                    this.OrdersRowChanging(this, new OrdersRowChangeEvent(((OrdersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OrdersRowDeleted != null)) {
                    this.OrdersRowDeleted(this, new OrdersRowChangeEvent(((OrdersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OrdersRowDeleting != null)) {
                    this.OrdersRowDeleting(this, new OrdersRowChangeEvent(((OrdersRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveOrdersRow(OrdersRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrdersRow : DataRow {
            
            private OrdersDataTable tableOrders;
            
            internal OrdersRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableOrders = ((OrdersDataTable)(this.Table));
            }
            
            public int orderNumber {
                get {
                    return ((int)(this[this.tableOrders.orderNumberColumn]));
                }
                set {
                    this[this.tableOrders.orderNumberColumn] = value;
                }
            }
            
            public System.DateTime orderDate {
                get {
                    return ((System.DateTime)(this[this.tableOrders.orderDateColumn]));
                }
                set {
                    this[this.tableOrders.orderDateColumn] = value;
                }
            }
            
            public System.DateTime dueDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableOrders.dueDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.dueDateColumn] = value;
                }
            }
            
            public System.DateTime recDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableOrders.recDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.recDateColumn] = value;
                }
            }
            
            public int reorderNumber {
                get {
                    try {
                        return ((int)(this[this.tableOrders.reorderNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.reorderNumberColumn] = value;
                }
            }
            
            public string shippingMethod {
                get {
                    try {
                        return ((string)(this[this.tableOrders.shippingMethodColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.shippingMethodColumn] = value;
                }
            }
            
            public System.DateTime artDueDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableOrders.artDueDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.artDueDateColumn] = value;
                }
            }
            
            public string rushReorderRegular {
                get {
                    return ((string)(this[this.tableOrders.rushReorderRegularColumn]));
                }
                set {
                    this[this.tableOrders.rushReorderRegularColumn] = value;
                }
            }
            
            public string orderType {
                get {
                    return ((string)(this[this.tableOrders.orderTypeColumn]));
                }
                set {
                    this[this.tableOrders.orderTypeColumn] = value;
                }
            }
            
            public int xOrderNumber {
                get {
                    try {
                        return ((int)(this[this.tableOrders.xOrderNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.xOrderNumberColumn] = value;
                }
            }
            
            public string customerNumber {
                get {
                    return ((string)(this[this.tableOrders.customerNumberColumn]));
                }
                set {
                    this[this.tableOrders.customerNumberColumn] = value;
                }
            }
            
            public string contactPersonNumber {
                get {
                    try {
                        return ((string)(this[this.tableOrders.contactPersonNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.contactPersonNumberColumn] = value;
                }
            }
            
            public string insideRepNumber {
                get {
                    try {
                        return ((string)(this[this.tableOrders.insideRepNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.insideRepNumberColumn] = value;
                }
            }
            
            public string outsideRepNumber {
                get {
                    try {
                        return ((string)(this[this.tableOrders.outsideRepNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.outsideRepNumberColumn] = value;
                }
            }
            
            public int numColorsFront {
                get {
                    try {
                        return ((int)(this[this.tableOrders.numColorsFrontColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.numColorsFrontColumn] = value;
                }
            }
            
            public int numColorsBack {
                get {
                    try {
                        return ((int)(this[this.tableOrders.numColorsBackColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.numColorsBackColumn] = value;
                }
            }
            
            public int numColorsSleeve {
                get {
                    try {
                        return ((int)(this[this.tableOrders.numColorsSleeveColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.numColorsSleeveColumn] = value;
                }
            }
            
            public System.Decimal PMScharge {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableOrders.PMSchargeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.PMSchargeColumn] = value;
                }
            }
            
            public System.Decimal setupCharge {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableOrders.setupChargeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.setupChargeColumn] = value;
                }
            }
            
            public System.Decimal artCharge {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableOrders.artChargeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.artChargeColumn] = value;
                }
            }
            
            public System.Decimal rushCharge {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableOrders.rushChargeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.rushChargeColumn] = value;
                }
            }
            
            public System.Decimal deposit {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableOrders.depositColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.depositColumn] = value;
                }
            }
            
            public System.Decimal subtotal {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableOrders.subtotalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.subtotalColumn] = value;
                }
            }
            
            public System.Decimal salesTax {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableOrders.salesTaxColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.salesTaxColumn] = value;
                }
            }
            
            public System.Decimal shipping {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableOrders.shippingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.shippingColumn] = value;
                }
            }
            
            public System.Decimal totalDue {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableOrders.totalDueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.totalDueColumn] = value;
                }
            }
            
            public System.Decimal balanceDue {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableOrders.balanceDueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.balanceDueColumn] = value;
                }
            }
            
            public bool IsdueDateNull() {
                return this.IsNull(this.tableOrders.dueDateColumn);
            }
            
            public void SetdueDateNull() {
                this[this.tableOrders.dueDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsrecDateNull() {
                return this.IsNull(this.tableOrders.recDateColumn);
            }
            
            public void SetrecDateNull() {
                this[this.tableOrders.recDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsreorderNumberNull() {
                return this.IsNull(this.tableOrders.reorderNumberColumn);
            }
            
            public void SetreorderNumberNull() {
                this[this.tableOrders.reorderNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsshippingMethodNull() {
                return this.IsNull(this.tableOrders.shippingMethodColumn);
            }
            
            public void SetshippingMethodNull() {
                this[this.tableOrders.shippingMethodColumn] = System.Convert.DBNull;
            }
            
            public bool IsartDueDateNull() {
                return this.IsNull(this.tableOrders.artDueDateColumn);
            }
            
            public void SetartDueDateNull() {
                this[this.tableOrders.artDueDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsxOrderNumberNull() {
                return this.IsNull(this.tableOrders.xOrderNumberColumn);
            }
            
            public void SetxOrderNumberNull() {
                this[this.tableOrders.xOrderNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IscontactPersonNumberNull() {
                return this.IsNull(this.tableOrders.contactPersonNumberColumn);
            }
            
            public void SetcontactPersonNumberNull() {
                this[this.tableOrders.contactPersonNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsinsideRepNumberNull() {
                return this.IsNull(this.tableOrders.insideRepNumberColumn);
            }
            
            public void SetinsideRepNumberNull() {
                this[this.tableOrders.insideRepNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsoutsideRepNumberNull() {
                return this.IsNull(this.tableOrders.outsideRepNumberColumn);
            }
            
            public void SetoutsideRepNumberNull() {
                this[this.tableOrders.outsideRepNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsnumColorsFrontNull() {
                return this.IsNull(this.tableOrders.numColorsFrontColumn);
            }
            
            public void SetnumColorsFrontNull() {
                this[this.tableOrders.numColorsFrontColumn] = System.Convert.DBNull;
            }
            
            public bool IsnumColorsBackNull() {
                return this.IsNull(this.tableOrders.numColorsBackColumn);
            }
            
            public void SetnumColorsBackNull() {
                this[this.tableOrders.numColorsBackColumn] = System.Convert.DBNull;
            }
            
            public bool IsnumColorsSleeveNull() {
                return this.IsNull(this.tableOrders.numColorsSleeveColumn);
            }
            
            public void SetnumColorsSleeveNull() {
                this[this.tableOrders.numColorsSleeveColumn] = System.Convert.DBNull;
            }
            
            public bool IsPMSchargeNull() {
                return this.IsNull(this.tableOrders.PMSchargeColumn);
            }
            
            public void SetPMSchargeNull() {
                this[this.tableOrders.PMSchargeColumn] = System.Convert.DBNull;
            }
            
            public bool IssetupChargeNull() {
                return this.IsNull(this.tableOrders.setupChargeColumn);
            }
            
            public void SetsetupChargeNull() {
                this[this.tableOrders.setupChargeColumn] = System.Convert.DBNull;
            }
            
            public bool IsartChargeNull() {
                return this.IsNull(this.tableOrders.artChargeColumn);
            }
            
            public void SetartChargeNull() {
                this[this.tableOrders.artChargeColumn] = System.Convert.DBNull;
            }
            
            public bool IsrushChargeNull() {
                return this.IsNull(this.tableOrders.rushChargeColumn);
            }
            
            public void SetrushChargeNull() {
                this[this.tableOrders.rushChargeColumn] = System.Convert.DBNull;
            }
            
            public bool IsdepositNull() {
                return this.IsNull(this.tableOrders.depositColumn);
            }
            
            public void SetdepositNull() {
                this[this.tableOrders.depositColumn] = System.Convert.DBNull;
            }
            
            public bool IssubtotalNull() {
                return this.IsNull(this.tableOrders.subtotalColumn);
            }
            
            public void SetsubtotalNull() {
                this[this.tableOrders.subtotalColumn] = System.Convert.DBNull;
            }
            
            public bool IssalesTaxNull() {
                return this.IsNull(this.tableOrders.salesTaxColumn);
            }
            
            public void SetsalesTaxNull() {
                this[this.tableOrders.salesTaxColumn] = System.Convert.DBNull;
            }
            
            public bool IsshippingNull() {
                return this.IsNull(this.tableOrders.shippingColumn);
            }
            
            public void SetshippingNull() {
                this[this.tableOrders.shippingColumn] = System.Convert.DBNull;
            }
            
            public bool IstotalDueNull() {
                return this.IsNull(this.tableOrders.totalDueColumn);
            }
            
            public void SettotalDueNull() {
                this[this.tableOrders.totalDueColumn] = System.Convert.DBNull;
            }
            
            public bool IsbalanceDueNull() {
                return this.IsNull(this.tableOrders.balanceDueColumn);
            }
            
            public void SetbalanceDueNull() {
                this[this.tableOrders.balanceDueColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrdersRowChangeEvent : EventArgs {
            
            private OrdersRow eventRow;
            
            private DataRowAction eventAction;
            
            public OrdersRowChangeEvent(OrdersRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public OrdersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
